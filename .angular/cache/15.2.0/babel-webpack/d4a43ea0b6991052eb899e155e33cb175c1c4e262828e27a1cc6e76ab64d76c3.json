{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class StoreService {\n  constructor() {\n    this.myShoppingCart = [];\n    this.myCart = new BehaviorSubject([]);\n    this.myCart$ = this.myCart.asObservable();\n  }\n  addProduct(product) {\n    this.myShoppingCart.push(product);\n    this.myCart.next(this.myShoppingCart);\n  }\n  getShoppingCart() {\n    return this.myShoppingCart;\n  }\n  getTotal() {\n    return this.myShoppingCart.reduce((sum, item) => sum + item.price, 0);\n  }\n}\nStoreService.ɵfac = function StoreService_Factory(t) {\n  return new (t || StoreService)();\n};\nStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreService,\n  factory: StoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAOtC,OAAM,MAAOC,YAAY;EAOvBC;IALQ,mBAAc,GAAc,EAAE;IAC9B,WAAM,GAAG,IAAIF,eAAe,CAAY,EAAE,CAAC;IAEnD,YAAO,GAAG,IAAI,CAACG,MAAM,CAACC,YAAY,EAAE;EAEpB;EAEhBC,UAAU,CAACC,OAAgB;IACzB,IAAI,CAACC,cAAc,CAACC,IAAI,CAACF,OAAO,CAAC;IACjC,IAAI,CAACH,MAAM,CAACM,IAAI,CAAC,IAAI,CAACF,cAAc,CAAC;EACvC;EAEAG,eAAe;IACb,OAAO,IAAI,CAACH,cAAc;EAC5B;EAEAI,QAAQ;IACN,OAAO,IAAI,CAACJ,cAAc,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,KAAK,EAAE,CAAC,CAAC;EACvE;;AApBWd,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAe,SAAZf,YAAY;EAAAgB,YAFX;AAAM","names":["BehaviorSubject","StoreService","constructor","myCart","asObservable","addProduct","product","myShoppingCart","push","next","getShoppingCart","getTotal","reduce","sum","item","price","factory","providedIn"],"sourceRoot":"","sources":["C:\\Repos\\angular-APIS-main\\src\\app\\services\\store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Product } from '../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  private myShoppingCart: Product[] = [];\n  private myCart = new BehaviorSubject<Product[]>([]);\n\n  myCart$ = this.myCart.asObservable();\n\n  constructor() { }\n\n  addProduct(product: Product) {\n    this.myShoppingCart.push(product);\n    this.myCart.next(this.myShoppingCart);\n  }\n\n  getShoppingCart() {\n    return this.myShoppingCart;\n  }\n\n  getTotal() {\n    return this.myShoppingCart.reduce((sum, item) => sum + item.price, 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}